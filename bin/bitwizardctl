#!/usr/bin/env ruby

require 'bitwizard'
require 'optparse'
require 'readline'

class BasicLogger
	def debug(string)
		puts string
	end
end

Options = {
	bus: :spi,
	verbose: false,
	scan: true
}

class BitWizardCTL

	DetailedHelp = {
		scan: { text: "Scans for available boards" },
		list: { text: "Lists all the found boards" },
		eeprom: { args: "<addr>", text: "Read the eeprom from the specified address(es), or all found boards if none given" },
		features: { args: "<addr>", text: "Returns all of the features of the specified board" },
		exit: { text: "Exits the program" },
		help: { text: "Lists all the valid commands, or detailed help for a given command" },
		pwm: { args: "<addr> [port [value/'enable'/'disable']]", text: "Get/Set the PWM value for a certain port on a board" },
		stepper: { args: "<addr> <'current'/'target'/'delay'> [value]", text: "Get/Set a value for a stepper motor on the specified board" },
		motor: { args: "<addr> <'A'/'B'> <speed/'stop'>", text: "Change speed of a motor on the specified board" }
	}.sort

	def initialize
		@defaultlogger = BasicLogger.new if Options[:verbose]
		@boards = {}
	end

	def run!
		if Options[:scan] then
			cmd_scan
			puts
		end

		complete = Proc.new { |line|
			ret = []
			DetailedHelp.each do |cmd, help|
				data = line.split
				data << "" if line.end_with? " "

				ret << cmd.to_s unless data
				next unless data

				if data.length > 1 then
					next unless cmd.to_s == data[0]
					break if cmd.to_s == data[0] and not help.has_key? :args

					arg_data = help[:args].split[data.length - 2]

					if arg_data == "<addr>" then
						#p @boards
						@boards.each do |addr,_|
							straddr = "0x#{addr.to_s(16)}"
							ret << "#{straddr}" if /^#{Regexp.escape(data[1])}/ =~ straddr
						end
					elsif cmd == :stepper and data.length == 3 then
						["current","target","delay"].each do |str|
							ret << "#{str}" if /^#{Regexp.escape(data[2])}/ =~ str
						end
					elsif cmd == :motor then
						if data.length == 3 then
							["A","B"].each do |str|
								ret << "#{str}" if data[2].length == 0 or data[2] == str
							end
						elsif data.length == 4 and data[3].length > 0 then
							ret << "stop" if "stop".start_with? data[3]
						end
					elsif cmd == :pwm and data.length == 4 then
						["enable", "disable"].each do |str|
							ret << "#{str}" if str.start_with? data[3]
						end if data[3].length > 0
					end

					if ret.length == 1 then
						ret = [ data[0..-2].join(" ") + " " + ret[0] ]
					end
				else
					ret << cmd.to_s if /^#{Regexp.escape(line)}/ =~ cmd.to_s
				end
			end

			ret
		}

		Readline.completer_word_break_characters = ""
		Readline.completion_append_character = " "
		Readline.completion_proc = complete

		while line = Readline.readline("[BitWizard]\# ", true) do
			run_cmd!(*line.split)
		end
	end

	def run_cmd!(*args)
		command = args.shift
		if respond_to? "cmd_#{command}".to_sym, true then
			begin
				send("cmd_#{command}".to_sym, *args)
			rescue ArgumentError => ex
				puts "  \e[31m#{ex}\e[0m"
				if Options[:verbose] then
					ex.backtrace.each do |line|
						puts "    #{line}"
					end
				end
			end
		else
			puts "Unknown command '#{command}', try 'help' for a list of valid ones"
		end
	end

	private

	def parse_addr(addr)
		addr = eval addr if /^0x[0-9a-fA-F]{1,2}$/ =~ addr
		addr = addr.to_i unless addr.is_a? Fixnum

		raise ArgumentError.new "Address must be between 0x00 and 0xff" unless (0..255).include? addr
		addr
	end

	def get_board(addr)
		board = @boards[addr] if @boards.has_key? addr
		unless board then
			board = BitWizard::Board.detect address: addr, bus: Options[:bus], logger: (@defaultlogger if Options[:verbose])
			@boards[addr] = board if board.valid?
		end

		raise ArgumentError.new "No valid board on 0x#{addr.to_s(16)}" unless board.valid?
		board
	end

	def cmd_help(*)
		longestcmd = 0
		DetailedHelp.each do |cmd,data|
			curlen = cmd.length
			curlen += data[:args].length if data.has_key? :args
			longestcmd = curlen if curlen > longestcmd
		end

		puts "Available commands:"
		DetailedHelp.each do |cmd, help|
			puts "  #{cmd} #{help[:args] if help.has_key? :args} #{" " * (longestcmd - cmd.length - (help[:args] and help[:args].length or 0))}#{help[:text]}"
		end
	end

	def cmd_exit(*)
		exit
	end

	def cmd_scan(*)
		puts "Scanning for boards..."

		@boards = { }
		(0..0xff).step(2) do |address|
			begin
				temp = BitWizard::Board.detect address: address, bus: Options[:bus], logger: (@defaultlogger if Options[:verbose])
				next unless temp.valid?

				@boards[temp.address] = temp
				puts "0x#{address.to_s(16)}: #{temp.type} (#{temp.version})"
			rescue ArgumentError
			end
		end
	end

	def cmd_list(*)
		@boards.each do |_, board|
			puts "0x#{board.address.to_s(16)}: #{board.type} (#{board.version})"
		end
	end

	def cmd_features(*args)
		raise ArgumentError.new "Wrong number of arguments (#{args.count} for 1)" unless args.count == 1

		addr = parse_addr args[0]
		board = get_board addr

		puts "0x#{addr.to_s(16)}: #{board.features.join(", ")}"
	end

	def cmd_eeprom(*args)
		if args.count == 0 then
			@boards.each do |_, board|
				puts "0x#{board.address.to_s(16)}: #{board.read(0x02, 4).pack("C*").unpack("l>")[0]}"
			end
		elsif args.count == 1 then
			begin
				addr = parse_addr args[0]
				board = get_board addr
				puts "0x#{addr.to_s(16)}: #{board.read(0x02, 4).pack("C*").unpack("l>")[0]}"
			rescue ArgumentError => err
				puts "0x#{addr.to_s(16)}: #{err}"
			end
		end
	end

	def cmd_pwm(*args)
		raise ArgumentError.new "Wrong number of arguments (#{args.count} for 1-3)" unless (1..3).include? args.count
		addr, port, value = *args if args.count == 3
		value = value.to_i if not ["enable","disable"].include? value
		addr, port = *args if args.count == 2
		port = port.to_i if port
		addr = args[0] if args.count == 1

		raise ArgumentError.new "Value must be between 0 and 255" unless value.is_a? String or (0..255).include? value

		addr = parse_addr addr
		board = get_board addr

		raise ArgumentError.new "Board doesn't support PWM actions" unless board.features.include? :pwm

		puts "0x#{addr.to_s(16)}:"

		if port then
			if value.is_a? String then
				succ = board.pwm_disable port if value == "disable"
				succ = board.pwm_enable port if value == "enable"
				puts "  PWM \##{port}: #{value == "off" ? "disabled" : "enabled"}." if succ
				puts "  Failed to change PWM status on port \##{port}" unless succ
			else
				ports = board.pwm_ports
				unless ports.include? port then
					puts "  PWM not enabled on port #{port}"
					return
				end

				board[port] = value if value
				puts "  PWM \##{port}: #{((board[port] / 255.0) * 100).round(2)}% (#{board[port]})"
			end
		else
			board.pwm_ports.each do |port|
				puts "  PWM \##{port}: #{((board[port] / 255.0) * 100).round(2)}% (#{board[port]})"
			end
		end
	end

	def cmd_stepper(*args)
		raise ArgumentError.new "Wrong number of arguments (#{args.count} for 2-3)" unless (2..3).include? args.count

		addr, type, value = *args if args.count == 3
		value = value.to_i if value
		addr, type = *args if args.count == 2
		type = type.to_sym

		raise ArgumentError.new "Value to #{args.count == 3 ? "set" : "read"} must be 'current', 'target', or 'delay'" unless [:current, :target, :delay].include? type
		
		addr = parse_addr addr
		board = get_board addr

		raise ArgumentError.new "Board doesn't support stepper actions" unless board.features.include? :stepper

		case type
		when :current
			board.stepper_position = value if value
			puts "0x#{addr.to_s(16)}'s current position: #{board.stepper_position}"
		when :target
			board.stepper_target = value if value
			puts "0x#{addr.to_s(16)}'s target position: #{board.stepper_target}"
		when :delay
			board.stepper_delay = value if value
			puts "0x#{addr.to_s(16)}'s step delay: #{board.stepper_delay / 10.0}ms (#{board.stepper_delay})"
		end
	end

	def cmd_motor(*args)
		raise ArgumentError.new "Wrong number of arguments (#{args.count} for 3)" unless args.count == 3

		addr, motor, value = *args
		motor = motor.to_sym
		value = value.to_i unless value == "stop"

		raise ArgumentError.new "Motor must be 'A' or 'B'" unless [:A,:B].include? motor
		raise ArgumentError.new "Value must be between -255 - 255" unless value.is_a? String or (-255..255).include? value
		
		addr = parse_addr addr
		board = get_board addr

		raise ArgumentError.new "Board doesn't support motor actions" unless board.features.include? :motor

		if value.is_a? String
			board.motor_stop motor
		else
			board.motor_spin motor, value
		end
	end

end

OptionParser.new do |opts|
	opts.banner = "Usage: #{File.basename($0)} [options] [command [arguments]]"
	opts.separator ""
	opts.separator "Options:"

	opts.on("-i", "--i2c", "Use I2C instead of SPI") do |i|
		Options[:bus] = :i2c
	end

	opts.on("-s", "--skip", "Skip the scan on start") do
		Options[:scan] = false
	end

	opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
		Options[:verbose] = v
	end

	opts.on("-h", "--help", "Shows this text") do
		puts opts
		exit
	end

	opts.separator ""
	opts.separator "Commands:"

	BitWizardCTL::DetailedHelp.each do |cmd, help|
		opts.separator "  #{cmd}#{help.has_key? :args and " #{help[:args]}" or ""}"
		opts.separator "    #{help[:text]}"

	end
end.parse!

ctl = BitWizardCTL.new

if ARGV.count > 0 then
	ctl.run_cmd!(*ARGV)
else
	ctl.run!
end